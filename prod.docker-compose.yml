services:
  postgres:
    image: postgres:17.4-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DATABASE__USER}
      - POSTGRES_PASSWORD=${DATABASE__PASSWORD}
      - POSTGRES_DB=${DATABASE__DATABASE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 2s
      timeout: 5s
      retries: 10
    restart: always
    command: -p ${DATABASE__PORT}

  rabbitmq:
    image: rabbitmq:4.0.8-alpine
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ__USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ__PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 2s
      timeout: 5s
      retries: 10
    restart: always

  migrator:
    image: grayadvantage/jeopardy-migrator:latest
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    command: sh -c "alembic upgrade head && python -m app.fixtures.fixtures load ./app/fixtures/data.json"

  poller:
    image: grayadvantage/jeopardy-poller:latest
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    env_file:
      - .env
    restart: always

  bot:
    image: grayadvantage/jeopardy-bot:latest
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    env_file:
      - .env
    restart: always

  admin:
    build:
      context: .
      dockerfile: grayadvantage/jeopardy-admin:latest
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    env_file:
      - .env
    restart: always
