services:
  postgres:
    image: postgres:17.4-alpine
    ports:
      - ${DATABASE__PORT}:${DATABASE__PORT}
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DATABASE__USER}
      - POSTGRES_PASSWORD=${DATABASE__PASSWORD}
      - POSTGRES_DB=${DATABASE__DATABASE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 2s
      timeout: 5s
      retries: 10
    restart: always
    command: -p ${DATABASE__PORT}

  rabbitmq:
    image: rabbitmq:4.0.8-management-alpine  # временно
    ports:
      - ${RABBITMQ__PORT}:${RABBITMQ__PORT}
      - 15672:15672  # временно
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ__USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ__PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 2s
      timeout: 5s
      retries: 10
    restart: always

  poller:
    build:
      context: .
      dockerfile: app/poller/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    restart: always

#  worker:
#    build:
#      context: .
#      dockerfile: app/bot/Dockerfile
#    depends_on:
#      postgres:
#        condition: service_healthy
#      rabbitmq:
#        condition: service_healthy
#    env_file:
#      - .env
#    restart: always
